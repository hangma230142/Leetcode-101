class ListNode {
    int val;
    ListNode next;
    ListNode() {}
    ListNode(int val) { this.val = val; }
    ListNode (int val, ListNode next) { this.val = val; this.next = next; }
    public static ListNode deserialize(String data) {
    if (data == null || data.equals("[]")) return null;
    data = data.replaceAll("\\[|\\]", "");
    String[] parts = data.split(",");
    if (parts.length == 0) return null;
    ListNode dummy = new ListNode(0);
    ListNode current = dummy;
    for (String part : parts) {
        current.next = new ListNode(Integer.parseInt(part.trim()));
        current = current.next;
      }
      return dummy.next;
    }
}

class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode dummy = new ListNode(-1);
        ListNode current = dummy;
        while (list1 !=null && list2 != null) {
            if (list1.val <= list2.val) {
                current.next = list1;
                list1 = list1.next;
            } else {
                current.next = list2;
                list2 = list2.next;
            }
            current = current.next;
        }
        if (list1 != null) current.next = list1;
        if (list2 != null) current.next = list2;
        return dummy.next;
    }
}
